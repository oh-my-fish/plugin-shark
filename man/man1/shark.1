.\" generated with Ronn/v0.7.3
.\" http://github.com/rtomayko/ronn/tree/0.7.3
.
.TH "SHARK" "1" "December 2015" "" "shark"
.
.SH "NAME"
\fBshark\fR \- Sparkline Generator
.
.SH "SYNOPSIS"
\fBshark\fR [\fIoptions\fR] [\fB\-\-version\fR] [\fB\-\-help\fR]
.
.br
\fBshark\fR [\fB\-\-line\fR] [\fB\-\-field\fR=\fIformat\fR] [\fB\-\-record\fR=\fIformat\fR]
.
.br
\fBshark\fR [\fB\-\-null\fR=\fIstring\fR] [\fB\-\-delim\fR=\fIregex\fR]
.
.br
\fBshark\fR [\fB\-\-min\fR=\fInumber\fR] [\fB\-\-max\fR=\fInumber\fR]
.
.SH "DESCRIPTION"
A sparkline is a type of line chart that provides a simple representation of numerical or statistical variation in some measurement, typically over time\.
.
.P
Shark reads the standard input extracting numeric values and produces a stream of UTF\-8 block characters of increasing height\. Input is read up to NULL and processed as a single record by default\. To process each line as a separate record, use the \fB\-\-line\fR flag\.
.
.P
To process the input in real time, use \fB\-\-max\fR=\fInumber\fR and \fB\-\-min\fR=\fInumber\fR to set the dataset range in advance\.
.
.SH "OPTIONS"
.
.TP
\fB\-n\fR \fB\-\-line\fR[=\fItrue\fR|\fIfalse\fR]
Process each line as a separate record\. By default, Shark reads all the input up to NULL and uses the collected numbers as one dataset\. \fB\-\-line\fR changes this behavior, and forces Shark to process \fIeach\fR line as a separate record and the collected numbers from each record as different datasets\.
.
.IP
A single line of input may contain one or more numbers\. If a line contains multiple numbers, processing each line separately may be preferred based on your application requirements\. To customize the record output format use \fB\-\-record\fR=\fIformat\fR\.
.
.TP
\fB\-f\fR, \fB\-\-field\fR=\fIformat\fR
Set the field output \fIformat\fR\. A field or \fItick\fR is any of the UTF\-8 block characters used to represent the numeric values collected from the dataset\. \fIformat\fR is a \fBprintf\fR(1) valid format string\. The default value is \fB"%s"\fR\. You can display the numeric value of the current field using an additional \fB%d\fR\. For example, \fB"%s\et%d\en"\fR will display each tick in a new line followed by a \fItab\fR and the corresponding number collected from the dataset\.
.
.TP
\fB\-r\fR, \fB\-\-record\fR=\fIformat\fR
Set the record output \fIformat\fR\. Typically, a record consists of a single line of input and a dataset of one or more lines\. The default value is a new line \fB\en\fR\. You can force all output to be displayed in a single line regardless of \fB\-\-line\fR by setting this option to an empty string \fB\-\-record=\fR\.
.
.IP
The following additional format markers are available:
.
.IP
The first \fB%d\fR after \fB%s\fR displays the \fIlargest\fR number in the data set\.
.
.br
The second \fB%d\fR displays the \fIsmallst\fR number in the data set\.
.
.br
The third \fB%d\fR displays the total number of fields in the record\.
.
.br
.
.IP
For example, \fB"\etMAX %5d | MIN %5d\en"\fR will display each record in a single line, followed by a tab and the \fIlargest\fR and \fIsmallest\fR value; right\-column aligned by 5 spaces\.
.
.TP
\fB\-M\fR, \fB\-\-max\fR=\fInumber\fR
Set the maximum value in the dataset\. If this option is set, Shark does not calculate the max value and uses \fInumber\fR instead\.
.
.IP
Typically, Shark must read the entire dataset, or line record if \fB\-\-line\fR was used, in order to calculate both min and max and draw a sparkline\.
.
.IP
Use this option together with \fB\-\-min\fR=\fInumber\fR to process and draw the input in \fBreal time\fR\.
.
.TP
\fB\-m\fR, \fB\-\-min\fR=\fInumber\fR
Set the minimum value in the dataset\. If this option is set, Shark does not calculate the min value and uses \fInumber\fR instead\.
.
.IP
Use this option together with \fB\-\-max\fR=\fInumber\fR to draw the input in \fIreal time\fR\.
.
.TP
\fB\-d\fR \fB\-\-delim\fR=\fIregex\fR
Use \fIregex\fR as the number delimiter\. This value is used to extract numbers from each line of the input\. The default value is \fB[, ]\fR\.
.
.TP
\fB\-\-null\fR=\fIstring\fR
Use \fIstring\fR to display null values in the dataset\. Items that could not be parsed from the dataset as numbers, will be displayed using \fIstring\fR\. A white space \fB" "\fR is displayed by default\. To print nothing, use an empty string \fB""\fR\.
.
.TP
\fB\-v\fR \fB\-\-version\fR
Show version information\.
.
.TP
\fB\-h\fR \fB\-\-help\fR
Show usage help\.
.
.SH "EXAMPLES"
This section describes the bundled examples\.
.
.P
To run the examples:
.
.IP "" 4
.
.nf

source examples/shark\.fish
.
.fi
.
.IP "" 0
.
.IP "\(bu" 4
Display a single record line\.
.
.IP "" 0
.
.IP "" 4
.
.nf

seq 8 | shark
.
.fi
.
.IP "" 0
.
.IP "\(bu" 4
Draw two lines processing each record as a separate dataset\. Draw each record in a new line\.
.
.IP "" 0
.
.IP "" 4
.
.nf

printf "%s\en" "1 2 3 4 5" "100 200 300 400 500" | shark \-n
.
.fi
.
.IP "" 0
.
.P
Run the same example above without any flags to study \fB\-n\fR\'s behavior and with \fB\-nr\fR to draw everything on the same line\.
.
.IP "\(bu" 4
Draw a random sequence of numbers\.
.
.IP "" 0
.
.IP "" 4
.
.nf

for i in (seq 42)
    random
end | shark
.
.fi
.
.IP "" 0
.
.IP "\(bu" 4
Visualize bubble sort\.
.
.IP "" 0
.
.IP "" 4
.
.nf

for i in (seq 100)
    printf "%s " (random)
end | awk \-f bs\.awk | shark \-nr\er
.
.fi
.
.IP "" 0
.
.IP "\(bu" 4
Visualize quick sort\.
.
.IP "" 0
.
.IP "" 4
.
.nf

for i in (seq 100)
    printf "%s " (random)
end | awk \-f qs\.awk \' | shark \-nr\er
.
.fi
.
.IP "" 0
.
.IP "\(bu" 4
Display realtime data\.
.
.IP "" 0
.
.IP "" 4
.
.nf

curl \-s $data | shark \-\-min=0 \-\-max=32766 \-r\er
.
.fi
.
.IP "" 0
.
.IP "\(bu" 4
Display a moving wave through the terminal\.
.
.IP "" 0
.
.IP "" 4
.
.nf

while true
    printf "0$i + 1\en" | bc | read \-l i
    ruby \-e "
        (0\.\.`tput cols`\.to_i \- 1)\.collect{|x|
            printf \'%s \', (6 * Math::cos((x + $i) * Math::PI/5))\.ceil
        }
    " | shark \-d"[\-| ]" \-\-record="\er"
end
.
.fi
.
.IP "" 0
.
.IP "\(bu" 4
See also https://github\.com/holman/spark/wiki/Wicked\-Cool\-Usage for more examples\.
.
.IP "" 0
.
.SH "AUTHORS"
Shark was created by Jorge Bucaran \fIj@bucaran\.me\fR\.
.
.SH "CREDITS"
Shark draws heavily from Zach Holman\'s original Spark\. Thanks to him\.
.
.SH "BUGS"
From \fIhttps://github\.com/fish\-shell/fish\-shell/issues/206\fR, redirections and pipes involving blocks are run serially, not in parallel\. This causes Shark to block the pipeline and buffer the output when you pipe it to another command\.
.
.IP "" 4
.
.nf

[STDIN] | shark | formatter
.
.fi
.
.IP "" 0
.
.SS "WORKAROUNDS"
You can run Shark as an executable file, by adding the source to a file with a shebang and copying it to a directory in your \fB$PATH\fR, e\.g\., /usr/local/bin\.
.
.IP "" 4
.
.nf

awk \'BEGIN { print "#!/usr/bin/env fish" } // END { print "shark $argv" }\' shark\.fish > shark
chmod +x shark
cp shark /usr/local/bin
.
.fi
.
.IP "" 0
.
.P
Now you should be able to pipe Shark\'s output to \fIformatter\fR and process the data without blocking\.
.
.IP "" 4
.
.nf

function formatter
    set \-l LO \eu2581
    set \-l HI \eu2588

    set \-l R (set_color red)
    set \-l G (set_color green)
    set \-l N (set_color normal)

    sed "s/$LO/$R$LO$N/g;s/$HI/$G$HI$N/g"
end

set \-l data https://gist\.githubusercontent\.com/bucaran/af98670d9c301c89b3ed/raw
curl \-s $data | shark \-n | formatter
.
.fi
.
.IP "" 0
.
.P
\fIformatter\fR is used above to color lower ticks red and the highest block ticks green\.
.
.P
Another more practical, but less flexible workaround is running Shark inside a \fBfish\fR(1) child process\.
.
.IP "" 4
.
.nf

curl \-s $data | fish \-c "shark \-n" | sed "s/$LO/$R$LO$N/;s/$HI/$G$HI$N/"
.
.fi
.
.IP "" 0
.
.P
\fINote\fR: Shark must be installed as a function in your \fB$fisher_function_path\fR\. Otherwise, it will not be available to the child process\.
.
.SH "SEE ALSO"
.
.IP "\(bu" 4
examples/shark\.fish
.
.IP "\(bu" 4
https://github\.com/fish\-shell/fish\-shell/issues/206
.
.IP "\(bu" 4
https://github\.com/holman/spark/wiki/Wicked\-Cool\-Usage
.
.IP "\(bu" 4
https://en\.wikipedia\.org/wiki/Sparkline
.
.IP "" 0

